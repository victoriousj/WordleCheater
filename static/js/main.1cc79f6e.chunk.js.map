{"version":3,"sources":["LetterButton.js","UnknownLetter.js","App.js","serviceWorker.js","index.js"],"names":["LetterButton","props","letter","active","React","useState","isActive","setIsActive","className","onClick","toggleLetter","UnknownLetter","activePositions","setActivePositions","setActive","index","positions","indexOf","filter","x","setUnknownLetters","style","marginBottom","marginRight","textTransform","width","display","alphabet","dict","findResults","state","letters","excludedLetters","results","unknownLetters","length","word","wordArr","split","i","includes","App","addGuess","stateString","JSON","stringify","setState","console","log","onInput","event","target","value","nextSibling","focus","previousSibling","splice","push","reduce","a","b","letterButtons","map","key","href","this","border","padding","marginTop","borderRadius","fontSize","join","e","type","maxLength","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cc79f6e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction LetterButton(props) {\r\n  const { letter, active } = props;\r\n  const [isActive, setIsActive] = React.useState(active);\r\n\r\n  function setActive() {\r\n    setIsActive(!isActive);\r\n    props.toggleLetter(letter);\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <button\r\n        className={`letter ${isActive ? \"active\" : \"\"}`}\r\n        onClick={setActive}\r\n      >\r\n        {letter}\r\n      </button>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default LetterButton;\r\n","import React from \"react\";\r\n\r\nfunction UnknownLetter(props) {\r\n  const { letter } = props;\r\n  const [activePositions, setActivePositions] = React.useState([]);\r\n\r\n  function setActive(index) {\r\n    var positions = activePositions;\r\n    if (positions.indexOf(index) >= 0) {\r\n      positions = positions.filter((x) => x !== index);\r\n    } else {\r\n      positions = [...positions, index];\r\n    }\r\n    setActivePositions(positions);\r\n    props.setUnknownLetters(letter, positions);\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginBottom: \"2px\" }}>\r\n      <span\r\n        style={{\r\n          marginRight: \"10px\",\r\n          textTransform: \"uppercase\",\r\n          width: \"30px\",\r\n          display: \"inline-block\",\r\n        }}\r\n      >\r\n        {letter}\r\n      </span>\r\n      <button\r\n        className={`unkown-letter letter ${\r\n          activePositions.indexOf(0) >= 0 ? \"active\" : \"\"\r\n        }`}\r\n        onClick={() => setActive(0)}\r\n      >\r\n        {1}\r\n      </button>\r\n      <button\r\n        className={`unkown-letter letter ${\r\n          activePositions.indexOf(1) >= 0 ? \"active\" : \"\"\r\n        }`}\r\n        onClick={() => setActive(1)}\r\n      >\r\n        {2}\r\n      </button>\r\n      <button\r\n        className={`unkown-letter letter ${\r\n          activePositions.indexOf(2) >= 0 ? \"active\" : \"\"\r\n        }`}\r\n        onClick={() => setActive(2)}\r\n      >\r\n        {3}\r\n      </button>\r\n      <button\r\n        className={`unkown-letter letter ${\r\n          activePositions.indexOf(3) >= 0 ? \"active\" : \"\"\r\n        }`}\r\n        onClick={() => setActive(3)}\r\n      >\r\n        {4}\r\n      </button>\r\n      <button\r\n        className={`unkown-letter letter ${\r\n          activePositions.indexOf(4) >= 0 ? \"active\" : \"\"\r\n        }`}\r\n        onClick={() => setActive(4)}\r\n      >\r\n        {5}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UnknownLetter;\r\n","import React from \"react\";\r\n\r\nimport LetterButton from \"./LetterButton\";\r\nimport UnknownLetter from \"./UnknownLetter\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\n\r\nconst dict = [\r\n  \"aback\",\r\n  \"abase\",\r\n  \"abate\",\r\n  \"abbey\",\r\n  \"abbot\",\r\n  \"abhor\",\r\n  \"abide\",\r\n  \"abled\",\r\n  \"abode\",\r\n  \"abort\",\r\n  \"about\",\r\n  \"above\",\r\n  \"abuse\",\r\n  \"abyss\",\r\n  \"acorn\",\r\n  \"acrid\",\r\n  \"actor\",\r\n  \"acute\",\r\n  \"adage\",\r\n  \"adapt\",\r\n  \"adept\",\r\n  \"admin\",\r\n  \"admit\",\r\n  \"adobe\",\r\n  \"adopt\",\r\n  \"adore\",\r\n  \"adorn\",\r\n  \"adult\",\r\n  \"affix\",\r\n  \"afire\",\r\n  \"afoot\",\r\n  \"afoul\",\r\n  \"after\",\r\n  \"again\",\r\n  \"agape\",\r\n  \"agate\",\r\n  \"agent\",\r\n  \"agile\",\r\n  \"aging\",\r\n  \"aglow\",\r\n  \"agony\",\r\n  \"agora\",\r\n  \"agree\",\r\n  \"ahead\",\r\n  \"aider\",\r\n  \"aisle\",\r\n  \"alarm\",\r\n  \"album\",\r\n  \"alert\",\r\n  \"algae\",\r\n  \"alibi\",\r\n  \"alien\",\r\n  \"align\",\r\n  \"alike\",\r\n  \"alive\",\r\n  \"allay\",\r\n  \"alley\",\r\n  \"allot\",\r\n  \"allow\",\r\n  \"alloy\",\r\n  \"aloft\",\r\n  \"alone\",\r\n  \"along\",\r\n  \"aloof\",\r\n  \"aloud\",\r\n  \"alpha\",\r\n  \"altar\",\r\n  \"alter\",\r\n  \"amass\",\r\n  \"amaze\",\r\n  \"amber\",\r\n  \"amble\",\r\n  \"amend\",\r\n  \"amiss\",\r\n  \"amity\",\r\n  \"among\",\r\n  \"ample\",\r\n  \"amply\",\r\n  \"amuse\",\r\n  \"angel\",\r\n  \"anger\",\r\n  \"angle\",\r\n  \"angry\",\r\n  \"angst\",\r\n  \"anime\",\r\n  \"ankle\",\r\n  \"annex\",\r\n  \"annoy\",\r\n  \"annul\",\r\n  \"anode\",\r\n  \"antic\",\r\n  \"anvil\",\r\n  \"aorta\",\r\n  \"apart\",\r\n  \"aphid\",\r\n  \"aping\",\r\n  \"apnea\",\r\n  \"apple\",\r\n  \"apply\",\r\n  \"apron\",\r\n  \"aptly\",\r\n  \"arbor\",\r\n  \"ardor\",\r\n  \"arena\",\r\n  \"argue\",\r\n  \"arise\",\r\n  \"armor\",\r\n  \"aroma\",\r\n  \"arose\",\r\n  \"array\",\r\n  \"arrow\",\r\n  \"arson\",\r\n  \"artsy\",\r\n  \"ascot\",\r\n  \"ashen\",\r\n  \"aside\",\r\n  \"askew\",\r\n  \"assay\",\r\n  \"asset\",\r\n  \"atoll\",\r\n  \"atone\",\r\n  \"attic\",\r\n  \"audio\",\r\n  \"audit\",\r\n  \"augur\",\r\n  \"aunty\",\r\n  \"avail\",\r\n  \"avert\",\r\n  \"avian\",\r\n  \"avoid\",\r\n  \"await\",\r\n  \"awake\",\r\n  \"award\",\r\n  \"aware\",\r\n  \"awash\",\r\n  \"awful\",\r\n  \"awoke\",\r\n  \"axial\",\r\n  \"axiom\",\r\n  \"axion\",\r\n  \"azure\",\r\n  \"bacon\",\r\n  \"badge\",\r\n  \"badly\",\r\n  \"bagel\",\r\n  \"baggy\",\r\n  \"baker\",\r\n  \"baler\",\r\n  \"balmy\",\r\n  \"banal\",\r\n  \"banjo\",\r\n  \"barge\",\r\n  \"baron\",\r\n  \"basal\",\r\n  \"basic\",\r\n  \"basil\",\r\n  \"basin\",\r\n  \"basis\",\r\n  \"baste\",\r\n  \"batch\",\r\n  \"bathe\",\r\n  \"baton\",\r\n  \"batty\",\r\n  \"bawdy\",\r\n  \"bayou\",\r\n  \"beach\",\r\n  \"beady\",\r\n  \"beard\",\r\n  \"beast\",\r\n  \"beech\",\r\n  \"beefy\",\r\n  \"befit\",\r\n  \"began\",\r\n  \"begat\",\r\n  \"beget\",\r\n  \"begin\",\r\n  \"begun\",\r\n  \"being\",\r\n  \"belch\",\r\n  \"belie\",\r\n  \"belle\",\r\n  \"belly\",\r\n  \"below\",\r\n  \"bench\",\r\n  \"beret\",\r\n  \"berry\",\r\n  \"berth\",\r\n  \"beset\",\r\n  \"betel\",\r\n  \"bevel\",\r\n  \"bezel\",\r\n  \"bible\",\r\n  \"bicep\",\r\n  \"biddy\",\r\n  \"bigot\",\r\n  \"bilge\",\r\n  \"billy\",\r\n  \"binge\",\r\n  \"bingo\",\r\n  \"biome\",\r\n  \"birch\",\r\n  \"birth\",\r\n  \"bison\",\r\n  \"bitty\",\r\n  \"black\",\r\n  \"blade\",\r\n  \"blame\",\r\n  \"bland\",\r\n  \"blank\",\r\n  \"blare\",\r\n  \"blast\",\r\n  \"blaze\",\r\n  \"bleak\",\r\n  \"bleat\",\r\n  \"bleed\",\r\n  \"bleep\",\r\n  \"blend\",\r\n  \"bless\",\r\n  \"blimp\",\r\n  \"blind\",\r\n  \"blink\",\r\n  \"bliss\",\r\n  \"blitz\",\r\n  \"bloat\",\r\n  \"block\",\r\n  \"bloke\",\r\n  \"blond\",\r\n  \"blood\",\r\n  \"bloom\",\r\n  \"blown\",\r\n  \"bluer\",\r\n  \"bluff\",\r\n  \"blunt\",\r\n  \"blurb\",\r\n  \"blurt\",\r\n  \"blush\",\r\n  \"board\",\r\n  \"boast\",\r\n  \"bobby\",\r\n  \"boney\",\r\n  \"bongo\",\r\n  \"bonus\",\r\n  \"booby\",\r\n  \"boost\",\r\n  \"booth\",\r\n  \"booty\",\r\n  \"booze\",\r\n  \"boozy\",\r\n  \"borax\",\r\n  \"borne\",\r\n  \"bosom\",\r\n  \"bossy\",\r\n  \"botch\",\r\n  \"bough\",\r\n  \"boule\",\r\n  \"bound\",\r\n  \"bowel\",\r\n  \"boxer\",\r\n  \"brace\",\r\n  \"braid\",\r\n  \"brain\",\r\n  \"brake\",\r\n  \"brand\",\r\n  \"brash\",\r\n  \"brass\",\r\n  \"brave\",\r\n  \"bravo\",\r\n  \"brawl\",\r\n  \"brawn\",\r\n  \"bread\",\r\n  \"break\",\r\n  \"breed\",\r\n  \"briar\",\r\n  \"bribe\",\r\n  \"brick\",\r\n  \"bride\",\r\n  \"brief\",\r\n  \"brine\",\r\n  \"bring\",\r\n  \"brink\",\r\n  \"briny\",\r\n  \"brisk\",\r\n  \"broad\",\r\n  \"broil\",\r\n  \"broke\",\r\n  \"brood\",\r\n  \"brook\",\r\n  \"broom\",\r\n  \"broth\",\r\n  \"brown\",\r\n  \"brunt\",\r\n  \"brush\",\r\n  \"brute\",\r\n  \"buddy\",\r\n  \"budge\",\r\n  \"buggy\",\r\n  \"bugle\",\r\n  \"build\",\r\n  \"built\",\r\n  \"bulge\",\r\n  \"bulky\",\r\n  \"bully\",\r\n  \"bunch\",\r\n  \"bunny\",\r\n  \"burly\",\r\n  \"burnt\",\r\n  \"burst\",\r\n  \"bused\",\r\n  \"bushy\",\r\n  \"butch\",\r\n  \"butte\",\r\n  \"buxom\",\r\n  \"buyer\",\r\n  \"bylaw\",\r\n  \"cabal\",\r\n  \"cabby\",\r\n  \"cabin\",\r\n  \"cable\",\r\n  \"cacao\",\r\n  \"cache\",\r\n  \"cacti\",\r\n  \"caddy\",\r\n  \"cadet\",\r\n  \"cagey\",\r\n  \"cairn\",\r\n  \"camel\",\r\n  \"cameo\",\r\n  \"canal\",\r\n  \"candy\",\r\n  \"canny\",\r\n  \"canoe\",\r\n  \"canon\",\r\n  \"caper\",\r\n  \"caput\",\r\n  \"carat\",\r\n  \"cargo\",\r\n  \"carol\",\r\n  \"carry\",\r\n  \"carve\",\r\n  \"caste\",\r\n  \"catch\",\r\n  \"cater\",\r\n  \"catty\",\r\n  \"caulk\",\r\n  \"cause\",\r\n  \"cavil\",\r\n  \"cease\",\r\n  \"cedar\",\r\n  \"cello\",\r\n  \"chafe\",\r\n  \"chaff\",\r\n  \"chain\",\r\n  \"chair\",\r\n  \"chalk\",\r\n  \"champ\",\r\n  \"chant\",\r\n  \"chaos\",\r\n  \"chard\",\r\n  \"charm\",\r\n  \"chart\",\r\n  \"chase\",\r\n  \"chasm\",\r\n  \"cheap\",\r\n  \"cheat\",\r\n  \"check\",\r\n  \"cheek\",\r\n  \"cheer\",\r\n  \"chess\",\r\n  \"chest\",\r\n  \"chick\",\r\n  \"chide\",\r\n  \"chief\",\r\n  \"child\",\r\n  \"chili\",\r\n  \"chill\",\r\n  \"chime\",\r\n  \"china\",\r\n  \"chirp\",\r\n  \"chock\",\r\n  \"choir\",\r\n  \"choke\",\r\n  \"chord\",\r\n  \"chore\",\r\n  \"chose\",\r\n  \"chuck\",\r\n  \"chump\",\r\n  \"chunk\",\r\n  \"churn\",\r\n  \"chute\",\r\n  \"cider\",\r\n  \"cigar\",\r\n  \"cinch\",\r\n  \"circa\",\r\n  \"civic\",\r\n  \"civil\",\r\n  \"clack\",\r\n  \"claim\",\r\n  \"clamp\",\r\n  \"clang\",\r\n  \"clank\",\r\n  \"clash\",\r\n  \"clasp\",\r\n  \"class\",\r\n  \"clean\",\r\n  \"clear\",\r\n  \"cleat\",\r\n  \"cleft\",\r\n  \"clerk\",\r\n  \"click\",\r\n  \"cliff\",\r\n  \"climb\",\r\n  \"cling\",\r\n  \"clink\",\r\n  \"cloak\",\r\n  \"clock\",\r\n  \"clone\",\r\n  \"close\",\r\n  \"cloth\",\r\n  \"cloud\",\r\n  \"clout\",\r\n  \"clove\",\r\n  \"clown\",\r\n  \"cluck\",\r\n  \"clued\",\r\n  \"clump\",\r\n  \"clung\",\r\n  \"coach\",\r\n  \"coast\",\r\n  \"cobra\",\r\n  \"cocoa\",\r\n  \"colon\",\r\n  \"color\",\r\n  \"comet\",\r\n  \"comfy\",\r\n  \"comic\",\r\n  \"comma\",\r\n  \"conch\",\r\n  \"condo\",\r\n  \"conic\",\r\n  \"copse\",\r\n  \"coral\",\r\n  \"corer\",\r\n  \"corny\",\r\n  \"couch\",\r\n  \"cough\",\r\n  \"could\",\r\n  \"count\",\r\n  \"coupe\",\r\n  \"court\",\r\n  \"coven\",\r\n  \"cover\",\r\n  \"covet\",\r\n  \"covey\",\r\n  \"cower\",\r\n  \"coyly\",\r\n  \"crack\",\r\n  \"craft\",\r\n  \"cramp\",\r\n  \"crane\",\r\n  \"crank\",\r\n  \"crash\",\r\n  \"crass\",\r\n  \"crate\",\r\n  \"crave\",\r\n  \"crawl\",\r\n  \"craze\",\r\n  \"crazy\",\r\n  \"creak\",\r\n  \"cream\",\r\n  \"credo\",\r\n  \"creed\",\r\n  \"creek\",\r\n  \"creep\",\r\n  \"creme\",\r\n  \"crepe\",\r\n  \"crept\",\r\n  \"cress\",\r\n  \"crest\",\r\n  \"crick\",\r\n  \"cried\",\r\n  \"crier\",\r\n  \"crime\",\r\n  \"crimp\",\r\n  \"crisp\",\r\n  \"croak\",\r\n  \"crock\",\r\n  \"crone\",\r\n  \"crony\",\r\n  \"crook\",\r\n  \"cross\",\r\n  \"croup\",\r\n  \"crowd\",\r\n  \"crown\",\r\n  \"crude\",\r\n  \"cruel\",\r\n  \"crumb\",\r\n  \"crump\",\r\n  \"crush\",\r\n  \"crust\",\r\n  \"crypt\",\r\n  \"cubic\",\r\n  \"cumin\",\r\n  \"curio\",\r\n  \"curly\",\r\n  \"curry\",\r\n  \"curse\",\r\n  \"curve\",\r\n  \"curvy\",\r\n  \"cutie\",\r\n  \"cyber\",\r\n  \"cycle\",\r\n  \"cynic\",\r\n  \"daddy\",\r\n  \"daily\",\r\n  \"dairy\",\r\n  \"daisy\",\r\n  \"dally\",\r\n  \"dance\",\r\n  \"dandy\",\r\n  \"datum\",\r\n  \"daunt\",\r\n  \"dealt\",\r\n  \"death\",\r\n  \"debar\",\r\n  \"debit\",\r\n  \"debug\",\r\n  \"debut\",\r\n  \"decal\",\r\n  \"decay\",\r\n  \"decor\",\r\n  \"decoy\",\r\n  \"decry\",\r\n  \"defer\",\r\n  \"deign\",\r\n  \"deity\",\r\n  \"delay\",\r\n  \"delta\",\r\n  \"delve\",\r\n  \"demon\",\r\n  \"demur\",\r\n  \"denim\",\r\n  \"dense\",\r\n  \"depot\",\r\n  \"depth\",\r\n  \"derby\",\r\n  \"deter\",\r\n  \"detox\",\r\n  \"deuce\",\r\n  \"devil\",\r\n  \"diary\",\r\n  \"dicey\",\r\n  \"digit\",\r\n  \"dilly\",\r\n  \"dimly\",\r\n  \"diner\",\r\n  \"dingo\",\r\n  \"dingy\",\r\n  \"diode\",\r\n  \"dirge\",\r\n  \"dirty\",\r\n  \"disco\",\r\n  \"ditch\",\r\n  \"ditto\",\r\n  \"ditty\",\r\n  \"diver\",\r\n  \"dizzy\",\r\n  \"dodge\",\r\n  \"dodgy\",\r\n  \"dogma\",\r\n  \"doing\",\r\n  \"dolly\",\r\n  \"donor\",\r\n  \"donut\",\r\n  \"dopey\",\r\n  \"doubt\",\r\n  \"dough\",\r\n  \"dowdy\",\r\n  \"dowel\",\r\n  \"downy\",\r\n  \"dowry\",\r\n  \"dozen\",\r\n  \"draft\",\r\n  \"drain\",\r\n  \"drake\",\r\n  \"drama\",\r\n  \"drank\",\r\n  \"drape\",\r\n  \"drawl\",\r\n  \"drawn\",\r\n  \"dread\",\r\n  \"dream\",\r\n  \"dress\",\r\n  \"dried\",\r\n  \"drier\",\r\n  \"drift\",\r\n  \"drill\",\r\n  \"drink\",\r\n  \"drive\",\r\n  \"droit\",\r\n  \"droll\",\r\n  \"drone\",\r\n  \"drool\",\r\n  \"droop\",\r\n  \"dross\",\r\n  \"drove\",\r\n  \"drown\",\r\n  \"druid\",\r\n  \"drunk\",\r\n  \"dryer\",\r\n  \"dryly\",\r\n  \"duchy\",\r\n  \"dully\",\r\n  \"dummy\",\r\n  \"dumpy\",\r\n  \"dunce\",\r\n  \"dusky\",\r\n  \"dusty\",\r\n  \"dutch\",\r\n  \"duvet\",\r\n  \"dwarf\",\r\n  \"dwell\",\r\n  \"dwelt\",\r\n  \"dying\",\r\n  \"eager\",\r\n  \"eagle\",\r\n  \"early\",\r\n  \"earth\",\r\n  \"easel\",\r\n  \"eaten\",\r\n  \"eater\",\r\n  \"ebony\",\r\n  \"eclat\",\r\n  \"edict\",\r\n  \"edify\",\r\n  \"eerie\",\r\n  \"egret\",\r\n  \"eight\",\r\n  \"eject\",\r\n  \"eking\",\r\n  \"elate\",\r\n  \"elbow\",\r\n  \"elder\",\r\n  \"elect\",\r\n  \"elegy\",\r\n  \"elfin\",\r\n  \"elide\",\r\n  \"elite\",\r\n  \"elope\",\r\n  \"elude\",\r\n  \"email\",\r\n  \"embed\",\r\n  \"ember\",\r\n  \"emcee\",\r\n  \"empty\",\r\n  \"enact\",\r\n  \"endow\",\r\n  \"enema\",\r\n  \"enemy\",\r\n  \"enjoy\",\r\n  \"ennui\",\r\n  \"ensue\",\r\n  \"enter\",\r\n  \"entry\",\r\n  \"envoy\",\r\n  \"epoch\",\r\n  \"epoxy\",\r\n  \"equal\",\r\n  \"equip\",\r\n  \"erase\",\r\n  \"erect\",\r\n  \"erode\",\r\n  \"error\",\r\n  \"erupt\",\r\n  \"essay\",\r\n  \"ester\",\r\n  \"ether\",\r\n  \"ethic\",\r\n  \"ethos\",\r\n  \"etude\",\r\n  \"evade\",\r\n  \"event\",\r\n  \"every\",\r\n  \"evict\",\r\n  \"evoke\",\r\n  \"exact\",\r\n  \"exalt\",\r\n  \"excel\",\r\n  \"exert\",\r\n  \"exile\",\r\n  \"exist\",\r\n  \"expel\",\r\n  \"extol\",\r\n  \"extra\",\r\n  \"exult\",\r\n  \"eying\",\r\n  \"fable\",\r\n  \"facet\",\r\n  \"faint\",\r\n  \"fairy\",\r\n  \"faith\",\r\n  \"false\",\r\n  \"fancy\",\r\n  \"fanny\",\r\n  \"farce\",\r\n  \"fatal\",\r\n  \"fatty\",\r\n  \"fault\",\r\n  \"fauna\",\r\n  \"favor\",\r\n  \"feast\",\r\n  \"fecal\",\r\n  \"feign\",\r\n  \"fella\",\r\n  \"felon\",\r\n  \"femme\",\r\n  \"femur\",\r\n  \"fence\",\r\n  \"feral\",\r\n  \"ferry\",\r\n  \"fetal\",\r\n  \"fetch\",\r\n  \"fetid\",\r\n  \"fetus\",\r\n  \"fever\",\r\n  \"fewer\",\r\n  \"fiber\",\r\n  \"fibre\",\r\n  \"ficus\",\r\n  \"field\",\r\n  \"fiend\",\r\n  \"fiery\",\r\n  \"fifth\",\r\n  \"fifty\",\r\n  \"fight\",\r\n  \"filer\",\r\n  \"filet\",\r\n  \"filly\",\r\n  \"filmy\",\r\n  \"filth\",\r\n  \"final\",\r\n  \"finch\",\r\n  \"finer\",\r\n  \"first\",\r\n  \"fishy\",\r\n  \"fixer\",\r\n  \"fizzy\",\r\n  \"fjord\",\r\n  \"flack\",\r\n  \"flail\",\r\n  \"flair\",\r\n  \"flake\",\r\n  \"flaky\",\r\n  \"flame\",\r\n  \"flank\",\r\n  \"flare\",\r\n  \"flash\",\r\n  \"flask\",\r\n  \"fleck\",\r\n  \"fleet\",\r\n  \"flesh\",\r\n  \"flick\",\r\n  \"flier\",\r\n  \"fling\",\r\n  \"flint\",\r\n  \"flirt\",\r\n  \"float\",\r\n  \"flock\",\r\n  \"flood\",\r\n  \"floor\",\r\n  \"flora\",\r\n  \"floss\",\r\n  \"flour\",\r\n  \"flout\",\r\n  \"flown\",\r\n  \"fluff\",\r\n  \"fluid\",\r\n  \"fluke\",\r\n  \"flume\",\r\n  \"flung\",\r\n  \"flunk\",\r\n  \"flush\",\r\n  \"flute\",\r\n  \"flyer\",\r\n  \"foamy\",\r\n  \"focal\",\r\n  \"focus\",\r\n  \"foggy\",\r\n  \"foist\",\r\n  \"folio\",\r\n  \"folly\",\r\n  \"foray\",\r\n  \"force\",\r\n  \"forge\",\r\n  \"forgo\",\r\n  \"forte\",\r\n  \"forth\",\r\n  \"forty\",\r\n  \"forum\",\r\n  \"found\",\r\n  \"foyer\",\r\n  \"frail\",\r\n  \"frame\",\r\n  \"frank\",\r\n  \"fraud\",\r\n  \"freak\",\r\n  \"freed\",\r\n  \"freer\",\r\n  \"fresh\",\r\n  \"friar\",\r\n  \"fried\",\r\n  \"frill\",\r\n  \"frisk\",\r\n  \"fritz\",\r\n  \"frock\",\r\n  \"frond\",\r\n  \"front\",\r\n  \"frost\",\r\n  \"froth\",\r\n  \"frown\",\r\n  \"froze\",\r\n  \"fruit\",\r\n  \"fudge\",\r\n  \"fugue\",\r\n  \"fully\",\r\n  \"fungi\",\r\n  \"funky\",\r\n  \"funny\",\r\n  \"furor\",\r\n  \"furry\",\r\n  \"fussy\",\r\n  \"fuzzy\",\r\n  \"gaffe\",\r\n  \"gaily\",\r\n  \"gamer\",\r\n  \"gamma\",\r\n  \"gamut\",\r\n  \"gassy\",\r\n  \"gaudy\",\r\n  \"gauge\",\r\n  \"gaunt\",\r\n  \"gauze\",\r\n  \"gavel\",\r\n  \"gawky\",\r\n  \"gayer\",\r\n  \"gayly\",\r\n  \"gazer\",\r\n  \"gecko\",\r\n  \"geeky\",\r\n  \"geese\",\r\n  \"genie\",\r\n  \"genre\",\r\n  \"ghost\",\r\n  \"ghoul\",\r\n  \"giant\",\r\n  \"giddy\",\r\n  \"gipsy\",\r\n  \"girly\",\r\n  \"girth\",\r\n  \"given\",\r\n  \"giver\",\r\n  \"glade\",\r\n  \"gland\",\r\n  \"glare\",\r\n  \"glass\",\r\n  \"glaze\",\r\n  \"gleam\",\r\n  \"glean\",\r\n  \"glide\",\r\n  \"glint\",\r\n  \"gloat\",\r\n  \"globe\",\r\n  \"gloom\",\r\n  \"glory\",\r\n  \"gloss\",\r\n  \"glove\",\r\n  \"glyph\",\r\n  \"gnash\",\r\n  \"gnome\",\r\n  \"godly\",\r\n  \"going\",\r\n  \"golem\",\r\n  \"golly\",\r\n  \"gonad\",\r\n  \"goner\",\r\n  \"goody\",\r\n  \"gooey\",\r\n  \"goofy\",\r\n  \"goose\",\r\n  \"gorge\",\r\n  \"gouge\",\r\n  \"gourd\",\r\n  \"grace\",\r\n  \"grade\",\r\n  \"graft\",\r\n  \"grail\",\r\n  \"grain\",\r\n  \"grand\",\r\n  \"grant\",\r\n  \"grape\",\r\n  \"graph\",\r\n  \"grasp\",\r\n  \"grass\",\r\n  \"grate\",\r\n  \"grave\",\r\n  \"gravy\",\r\n  \"graze\",\r\n  \"great\",\r\n  \"greed\",\r\n  \"green\",\r\n  \"greet\",\r\n  \"grief\",\r\n  \"grill\",\r\n  \"grime\",\r\n  \"grimy\",\r\n  \"grind\",\r\n  \"gripe\",\r\n  \"groan\",\r\n  \"groin\",\r\n  \"groom\",\r\n  \"grope\",\r\n  \"gross\",\r\n  \"group\",\r\n  \"grout\",\r\n  \"grove\",\r\n  \"growl\",\r\n  \"grown\",\r\n  \"gruel\",\r\n  \"gruff\",\r\n  \"grunt\",\r\n  \"guard\",\r\n  \"guava\",\r\n  \"guess\",\r\n  \"guest\",\r\n  \"guide\",\r\n  \"guild\",\r\n  \"guile\",\r\n  \"guilt\",\r\n  \"guise\",\r\n  \"gulch\",\r\n  \"gully\",\r\n  \"gumbo\",\r\n  \"gummy\",\r\n  \"guppy\",\r\n  \"gusto\",\r\n  \"gusty\",\r\n  \"gypsy\",\r\n  \"habit\",\r\n  \"hairy\",\r\n  \"halve\",\r\n  \"handy\",\r\n  \"happy\",\r\n  \"hardy\",\r\n  \"harem\",\r\n  \"harpy\",\r\n  \"harry\",\r\n  \"harsh\",\r\n  \"haste\",\r\n  \"hasty\",\r\n  \"hatch\",\r\n  \"hater\",\r\n  \"haunt\",\r\n  \"haute\",\r\n  \"haven\",\r\n  \"havoc\",\r\n  \"hazel\",\r\n  \"heady\",\r\n  \"heard\",\r\n  \"heart\",\r\n  \"heath\",\r\n  \"heave\",\r\n  \"heavy\",\r\n  \"hedge\",\r\n  \"hefty\",\r\n  \"heist\",\r\n  \"helix\",\r\n  \"hello\",\r\n  \"hence\",\r\n  \"heron\",\r\n  \"hilly\",\r\n  \"hinge\",\r\n  \"hippo\",\r\n  \"hippy\",\r\n  \"hitch\",\r\n  \"hoard\",\r\n  \"hobby\",\r\n  \"hoist\",\r\n  \"holly\",\r\n  \"homer\",\r\n  \"honey\",\r\n  \"honor\",\r\n  \"horde\",\r\n  \"horny\",\r\n  \"horse\",\r\n  \"hotel\",\r\n  \"hotly\",\r\n  \"hound\",\r\n  \"house\",\r\n  \"hovel\",\r\n  \"hover\",\r\n  \"howdy\",\r\n  \"human\",\r\n  \"humid\",\r\n  \"humor\",\r\n  \"humph\",\r\n  \"humus\",\r\n  \"hunch\",\r\n  \"hunky\",\r\n  \"hurry\",\r\n  \"husky\",\r\n  \"hussy\",\r\n  \"hutch\",\r\n  \"hydro\",\r\n  \"hyena\",\r\n  \"hymen\",\r\n  \"hyper\",\r\n  \"icily\",\r\n  \"icing\",\r\n  \"ideal\",\r\n  \"idiom\",\r\n  \"idiot\",\r\n  \"idler\",\r\n  \"idyll\",\r\n  \"igloo\",\r\n  \"iliac\",\r\n  \"image\",\r\n  \"imbue\",\r\n  \"impel\",\r\n  \"imply\",\r\n  \"inane\",\r\n  \"inbox\",\r\n  \"incur\",\r\n  \"index\",\r\n  \"inept\",\r\n  \"inert\",\r\n  \"infer\",\r\n  \"ingot\",\r\n  \"inlay\",\r\n  \"inlet\",\r\n  \"inner\",\r\n  \"input\",\r\n  \"inter\",\r\n  \"intro\",\r\n  \"ionic\",\r\n  \"irate\",\r\n  \"irony\",\r\n  \"islet\",\r\n  \"issue\",\r\n  \"itchy\",\r\n  \"ivory\",\r\n  \"jaunt\",\r\n  \"jazzy\",\r\n  \"jelly\",\r\n  \"jerky\",\r\n  \"jetty\",\r\n  \"jewel\",\r\n  \"jiffy\",\r\n  \"joint\",\r\n  \"joist\",\r\n  \"joker\",\r\n  \"jolly\",\r\n  \"joust\",\r\n  \"judge\",\r\n  \"juice\",\r\n  \"juicy\",\r\n  \"jumbo\",\r\n  \"jumpy\",\r\n  \"junta\",\r\n  \"junto\",\r\n  \"juror\",\r\n  \"kappa\",\r\n  \"karma\",\r\n  \"kayak\",\r\n  \"kebab\",\r\n  \"khaki\",\r\n  \"kinky\",\r\n  \"kiosk\",\r\n  \"kitty\",\r\n  \"knack\",\r\n  \"knave\",\r\n  \"knead\",\r\n  \"kneed\",\r\n  \"kneel\",\r\n  \"knelt\",\r\n  \"knife\",\r\n  \"knock\",\r\n  \"knoll\",\r\n  \"known\",\r\n  \"koala\",\r\n  \"krill\",\r\n  \"label\",\r\n  \"labor\",\r\n  \"laden\",\r\n  \"ladle\",\r\n  \"lager\",\r\n  \"lance\",\r\n  \"lanky\",\r\n  \"lapel\",\r\n  \"lapse\",\r\n  \"large\",\r\n  \"larva\",\r\n  \"lasso\",\r\n  \"latch\",\r\n  \"later\",\r\n  \"lathe\",\r\n  \"latte\",\r\n  \"laugh\",\r\n  \"layer\",\r\n  \"leach\",\r\n  \"leafy\",\r\n  \"leaky\",\r\n  \"leant\",\r\n  \"leapt\",\r\n  \"learn\",\r\n  \"lease\",\r\n  \"leash\",\r\n  \"least\",\r\n  \"leave\",\r\n  \"ledge\",\r\n  \"leech\",\r\n  \"leery\",\r\n  \"lefty\",\r\n  \"legal\",\r\n  \"leggy\",\r\n  \"lemon\",\r\n  \"lemur\",\r\n  \"leper\",\r\n  \"level\",\r\n  \"lever\",\r\n  \"libel\",\r\n  \"liege\",\r\n  \"light\",\r\n  \"liken\",\r\n  \"lilac\",\r\n  \"limbo\",\r\n  \"limit\",\r\n  \"linen\",\r\n  \"liner\",\r\n  \"lingo\",\r\n  \"lipid\",\r\n  \"lithe\",\r\n  \"liver\",\r\n  \"livid\",\r\n  \"llama\",\r\n  \"loamy\",\r\n  \"loath\",\r\n  \"lobby\",\r\n  \"local\",\r\n  \"locus\",\r\n  \"lodge\",\r\n  \"lofty\",\r\n  \"logic\",\r\n  \"login\",\r\n  \"loopy\",\r\n  \"loose\",\r\n  \"lorry\",\r\n  \"loser\",\r\n  \"louse\",\r\n  \"lousy\",\r\n  \"lover\",\r\n  \"lower\",\r\n  \"lowly\",\r\n  \"loyal\",\r\n  \"lucid\",\r\n  \"lucky\",\r\n  \"lumen\",\r\n  \"lumpy\",\r\n  \"lunar\",\r\n  \"lunch\",\r\n  \"lunge\",\r\n  \"lupus\",\r\n  \"lurch\",\r\n  \"lurid\",\r\n  \"lusty\",\r\n  \"lying\",\r\n  \"lymph\",\r\n  \"lynch\",\r\n  \"lyric\",\r\n  \"macaw\",\r\n  \"macho\",\r\n  \"macro\",\r\n  \"madam\",\r\n  \"madly\",\r\n  \"mafia\",\r\n  \"magic\",\r\n  \"magma\",\r\n  \"maize\",\r\n  \"major\",\r\n  \"maker\",\r\n  \"mambo\",\r\n  \"mamma\",\r\n  \"mammy\",\r\n  \"manga\",\r\n  \"mange\",\r\n  \"mango\",\r\n  \"mangy\",\r\n  \"mania\",\r\n  \"manic\",\r\n  \"manly\",\r\n  \"manor\",\r\n  \"maple\",\r\n  \"march\",\r\n  \"marry\",\r\n  \"marsh\",\r\n  \"mason\",\r\n  \"masse\",\r\n  \"match\",\r\n  \"matey\",\r\n  \"mauve\",\r\n  \"maxim\",\r\n  \"maybe\",\r\n  \"mayor\",\r\n  \"mealy\",\r\n  \"meant\",\r\n  \"meaty\",\r\n  \"mecca\",\r\n  \"medal\",\r\n  \"media\",\r\n  \"medic\",\r\n  \"melee\",\r\n  \"melon\",\r\n  \"mercy\",\r\n  \"merge\",\r\n  \"merit\",\r\n  \"merry\",\r\n  \"metal\",\r\n  \"meter\",\r\n  \"metro\",\r\n  \"micro\",\r\n  \"midge\",\r\n  \"midst\",\r\n  \"might\",\r\n  \"milky\",\r\n  \"mimic\",\r\n  \"mince\",\r\n  \"miner\",\r\n  \"minim\",\r\n  \"minor\",\r\n  \"minty\",\r\n  \"minus\",\r\n  \"mirth\",\r\n  \"miser\",\r\n  \"missy\",\r\n  \"mocha\",\r\n  \"modal\",\r\n  \"model\",\r\n  \"modem\",\r\n  \"mogul\",\r\n  \"moist\",\r\n  \"molar\",\r\n  \"moldy\",\r\n  \"money\",\r\n  \"month\",\r\n  \"moody\",\r\n  \"moose\",\r\n  \"moral\",\r\n  \"moron\",\r\n  \"morph\",\r\n  \"mossy\",\r\n  \"motel\",\r\n  \"motif\",\r\n  \"motor\",\r\n  \"motto\",\r\n  \"moult\",\r\n  \"mound\",\r\n  \"mount\",\r\n  \"mourn\",\r\n  \"mouse\",\r\n  \"mouth\",\r\n  \"mover\",\r\n  \"movie\",\r\n  \"mower\",\r\n  \"mucky\",\r\n  \"mucus\",\r\n  \"muddy\",\r\n  \"mulch\",\r\n  \"mummy\",\r\n  \"munch\",\r\n  \"mural\",\r\n  \"murky\",\r\n  \"mushy\",\r\n  \"music\",\r\n  \"musky\",\r\n  \"musty\",\r\n  \"myrrh\",\r\n  \"nadir\",\r\n  \"naive\",\r\n  \"nanny\",\r\n  \"nasal\",\r\n  \"nasty\",\r\n  \"natal\",\r\n  \"naval\",\r\n  \"navel\",\r\n  \"needy\",\r\n  \"neigh\",\r\n  \"nerdy\",\r\n  \"nerve\",\r\n  \"never\",\r\n  \"newer\",\r\n  \"newly\",\r\n  \"nicer\",\r\n  \"niche\",\r\n  \"niece\",\r\n  \"night\",\r\n  \"ninja\",\r\n  \"ninny\",\r\n  \"ninth\",\r\n  \"noble\",\r\n  \"nobly\",\r\n  \"noise\",\r\n  \"noisy\",\r\n  \"nomad\",\r\n  \"noose\",\r\n  \"north\",\r\n  \"nosey\",\r\n  \"notch\",\r\n  \"novel\",\r\n  \"nudge\",\r\n  \"nurse\",\r\n  \"nutty\",\r\n  \"nylon\",\r\n  \"nymph\",\r\n  \"oaken\",\r\n  \"obese\",\r\n  \"occur\",\r\n  \"ocean\",\r\n  \"octal\",\r\n  \"octet\",\r\n  \"odder\",\r\n  \"oddly\",\r\n  \"offal\",\r\n  \"offer\",\r\n  \"often\",\r\n  \"olden\",\r\n  \"older\",\r\n  \"olive\",\r\n  \"ombre\",\r\n  \"omega\",\r\n  \"onion\",\r\n  \"onset\",\r\n  \"opera\",\r\n  \"opine\",\r\n  \"opium\",\r\n  \"optic\",\r\n  \"orbit\",\r\n  \"order\",\r\n  \"organ\",\r\n  \"other\",\r\n  \"otter\",\r\n  \"ought\",\r\n  \"ounce\",\r\n  \"outdo\",\r\n  \"outer\",\r\n  \"outgo\",\r\n  \"ovary\",\r\n  \"ovate\",\r\n  \"overt\",\r\n  \"ovine\",\r\n  \"ovoid\",\r\n  \"owing\",\r\n  \"owner\",\r\n  \"oxide\",\r\n  \"ozone\",\r\n  \"paddy\",\r\n  \"pagan\",\r\n  \"paint\",\r\n  \"paler\",\r\n  \"palsy\",\r\n  \"panel\",\r\n  \"panic\",\r\n  \"pansy\",\r\n  \"papal\",\r\n  \"paper\",\r\n  \"parer\",\r\n  \"parka\",\r\n  \"parry\",\r\n  \"parse\",\r\n  \"party\",\r\n  \"pasta\",\r\n  \"paste\",\r\n  \"pasty\",\r\n  \"patch\",\r\n  \"patio\",\r\n  \"patsy\",\r\n  \"patty\",\r\n  \"pause\",\r\n  \"payee\",\r\n  \"payer\",\r\n  \"peace\",\r\n  \"peach\",\r\n  \"pearl\",\r\n  \"pecan\",\r\n  \"pedal\",\r\n  \"penal\",\r\n  \"pence\",\r\n  \"penne\",\r\n  \"penny\",\r\n  \"perch\",\r\n  \"peril\",\r\n  \"perky\",\r\n  \"pesky\",\r\n  \"pesto\",\r\n  \"petal\",\r\n  \"petty\",\r\n  \"phase\",\r\n  \"phone\",\r\n  \"phony\",\r\n  \"photo\",\r\n  \"piano\",\r\n  \"picky\",\r\n  \"piece\",\r\n  \"piety\",\r\n  \"piggy\",\r\n  \"pilot\",\r\n  \"pinch\",\r\n  \"piney\",\r\n  \"pinky\",\r\n  \"pinto\",\r\n  \"piper\",\r\n  \"pique\",\r\n  \"pitch\",\r\n  \"pithy\",\r\n  \"pivot\",\r\n  \"pixel\",\r\n  \"pixie\",\r\n  \"pizza\",\r\n  \"place\",\r\n  \"plaid\",\r\n  \"plain\",\r\n  \"plait\",\r\n  \"plane\",\r\n  \"plank\",\r\n  \"plant\",\r\n  \"plate\",\r\n  \"plaza\",\r\n  \"plead\",\r\n  \"pleat\",\r\n  \"plied\",\r\n  \"plier\",\r\n  \"pluck\",\r\n  \"plumb\",\r\n  \"plume\",\r\n  \"plump\",\r\n  \"plunk\",\r\n  \"plush\",\r\n  \"poesy\",\r\n  \"point\",\r\n  \"poise\",\r\n  \"poker\",\r\n  \"polar\",\r\n  \"polka\",\r\n  \"polyp\",\r\n  \"pooch\",\r\n  \"poppy\",\r\n  \"porch\",\r\n  \"poser\",\r\n  \"posit\",\r\n  \"posse\",\r\n  \"pouch\",\r\n  \"pound\",\r\n  \"pouty\",\r\n  \"power\",\r\n  \"prank\",\r\n  \"prawn\",\r\n  \"preen\",\r\n  \"press\",\r\n  \"price\",\r\n  \"prick\",\r\n  \"pride\",\r\n  \"pried\",\r\n  \"prime\",\r\n  \"primo\",\r\n  \"print\",\r\n  \"prior\",\r\n  \"prism\",\r\n  \"privy\",\r\n  \"prize\",\r\n  \"probe\",\r\n  \"prone\",\r\n  \"prong\",\r\n  \"proof\",\r\n  \"prose\",\r\n  \"proud\",\r\n  \"prove\",\r\n  \"prowl\",\r\n  \"proxy\",\r\n  \"prude\",\r\n  \"prune\",\r\n  \"psalm\",\r\n  \"pubic\",\r\n  \"pudgy\",\r\n  \"puffy\",\r\n  \"pulpy\",\r\n  \"pulse\",\r\n  \"punch\",\r\n  \"pupal\",\r\n  \"pupil\",\r\n  \"puppy\",\r\n  \"puree\",\r\n  \"purer\",\r\n  \"purge\",\r\n  \"purse\",\r\n  \"pushy\",\r\n  \"putty\",\r\n  \"pygmy\",\r\n  \"quack\",\r\n  \"quail\",\r\n  \"quake\",\r\n  \"qualm\",\r\n  \"quark\",\r\n  \"quart\",\r\n  \"quash\",\r\n  \"quasi\",\r\n  \"queen\",\r\n  \"queer\",\r\n  \"quell\",\r\n  \"query\",\r\n  \"quest\",\r\n  \"queue\",\r\n  \"quick\",\r\n  \"quiet\",\r\n  \"quill\",\r\n  \"quilt\",\r\n  \"quirk\",\r\n  \"quite\",\r\n  \"quota\",\r\n  \"quote\",\r\n  \"quoth\",\r\n  \"rabbi\",\r\n  \"rabid\",\r\n  \"racer\",\r\n  \"radar\",\r\n  \"radii\",\r\n  \"radio\",\r\n  \"rainy\",\r\n  \"raise\",\r\n  \"rajah\",\r\n  \"rally\",\r\n  \"ralph\",\r\n  \"ramen\",\r\n  \"ranch\",\r\n  \"randy\",\r\n  \"range\",\r\n  \"rapid\",\r\n  \"rarer\",\r\n  \"raspy\",\r\n  \"ratio\",\r\n  \"ratty\",\r\n  \"raven\",\r\n  \"rayon\",\r\n  \"razor\",\r\n  \"reach\",\r\n  \"react\",\r\n  \"ready\",\r\n  \"realm\",\r\n  \"rearm\",\r\n  \"rebar\",\r\n  \"rebel\",\r\n  \"rebus\",\r\n  \"rebut\",\r\n  \"recap\",\r\n  \"recur\",\r\n  \"recut\",\r\n  \"reedy\",\r\n  \"refer\",\r\n  \"refit\",\r\n  \"regal\",\r\n  \"rehab\",\r\n  \"reign\",\r\n  \"relax\",\r\n  \"relay\",\r\n  \"relic\",\r\n  \"remit\",\r\n  \"renal\",\r\n  \"renew\",\r\n  \"repay\",\r\n  \"repel\",\r\n  \"reply\",\r\n  \"rerun\",\r\n  \"reset\",\r\n  \"resin\",\r\n  \"retch\",\r\n  \"retro\",\r\n  \"retry\",\r\n  \"reuse\",\r\n  \"revel\",\r\n  \"revue\",\r\n  \"rhino\",\r\n  \"rhyme\",\r\n  \"rider\",\r\n  \"ridge\",\r\n  \"rifle\",\r\n  \"right\",\r\n  \"rigid\",\r\n  \"rigor\",\r\n  \"rinse\",\r\n  \"ripen\",\r\n  \"riper\",\r\n  \"risen\",\r\n  \"riser\",\r\n  \"risky\",\r\n  \"rival\",\r\n  \"river\",\r\n  \"rivet\",\r\n  \"roach\",\r\n  \"roast\",\r\n  \"robin\",\r\n  \"robot\",\r\n  \"rocky\",\r\n  \"rodeo\",\r\n  \"roger\",\r\n  \"rogue\",\r\n  \"roomy\",\r\n  \"roost\",\r\n  \"rotor\",\r\n  \"rouge\",\r\n  \"rough\",\r\n  \"round\",\r\n  \"rouse\",\r\n  \"route\",\r\n  \"rover\",\r\n  \"rowdy\",\r\n  \"rower\",\r\n  \"royal\",\r\n  \"ruddy\",\r\n  \"ruder\",\r\n  \"rugby\",\r\n  \"ruler\",\r\n  \"rumba\",\r\n  \"rumor\",\r\n  \"rupee\",\r\n  \"rural\",\r\n  \"rusty\",\r\n  \"sadly\",\r\n  \"safer\",\r\n  \"saint\",\r\n  \"salad\",\r\n  \"sally\",\r\n  \"salon\",\r\n  \"salsa\",\r\n  \"salty\",\r\n  \"salve\",\r\n  \"salvo\",\r\n  \"sandy\",\r\n  \"saner\",\r\n  \"sappy\",\r\n  \"sassy\",\r\n  \"satin\",\r\n  \"satyr\",\r\n  \"sauce\",\r\n  \"saucy\",\r\n  \"sauna\",\r\n  \"saute\",\r\n  \"savor\",\r\n  \"savoy\",\r\n  \"savvy\",\r\n  \"scald\",\r\n  \"scale\",\r\n  \"scalp\",\r\n  \"scaly\",\r\n  \"scamp\",\r\n  \"scant\",\r\n  \"scare\",\r\n  \"scarf\",\r\n  \"scary\",\r\n  \"scene\",\r\n  \"scent\",\r\n  \"scion\",\r\n  \"scoff\",\r\n  \"scold\",\r\n  \"scone\",\r\n  \"scoop\",\r\n  \"scope\",\r\n  \"score\",\r\n  \"scorn\",\r\n  \"scour\",\r\n  \"scout\",\r\n  \"scowl\",\r\n  \"scram\",\r\n  \"scrap\",\r\n  \"scree\",\r\n  \"screw\",\r\n  \"scrub\",\r\n  \"scrum\",\r\n  \"scuba\",\r\n  \"sedan\",\r\n  \"seedy\",\r\n  \"segue\",\r\n  \"seize\",\r\n  \"semen\",\r\n  \"sense\",\r\n  \"sepia\",\r\n  \"serif\",\r\n  \"serum\",\r\n  \"serve\",\r\n  \"setup\",\r\n  \"seven\",\r\n  \"sever\",\r\n  \"sewer\",\r\n  \"shack\",\r\n  \"shade\",\r\n  \"shady\",\r\n  \"shaft\",\r\n  \"shake\",\r\n  \"shaky\",\r\n  \"shale\",\r\n  \"shall\",\r\n  \"shalt\",\r\n  \"shame\",\r\n  \"shank\",\r\n  \"shape\",\r\n  \"shard\",\r\n  \"share\",\r\n  \"shark\",\r\n  \"sharp\",\r\n  \"shave\",\r\n  \"shawl\",\r\n  \"shear\",\r\n  \"sheen\",\r\n  \"sheep\",\r\n  \"sheer\",\r\n  \"sheet\",\r\n  \"sheik\",\r\n  \"shelf\",\r\n  \"shell\",\r\n  \"shied\",\r\n  \"shift\",\r\n  \"shine\",\r\n  \"shiny\",\r\n  \"shire\",\r\n  \"shirk\",\r\n  \"shirt\",\r\n  \"shoal\",\r\n  \"shock\",\r\n  \"shone\",\r\n  \"shook\",\r\n  \"shoot\",\r\n  \"shore\",\r\n  \"shorn\",\r\n  \"short\",\r\n  \"shout\",\r\n  \"shove\",\r\n  \"shown\",\r\n  \"showy\",\r\n  \"shrew\",\r\n  \"shrub\",\r\n  \"shrug\",\r\n  \"shuck\",\r\n  \"shunt\",\r\n  \"shush\",\r\n  \"shyly\",\r\n  \"siege\",\r\n  \"sieve\",\r\n  \"sight\",\r\n  \"sigma\",\r\n  \"silky\",\r\n  \"silly\",\r\n  \"since\",\r\n  \"sinew\",\r\n  \"singe\",\r\n  \"siren\",\r\n  \"sissy\",\r\n  \"sixth\",\r\n  \"sixty\",\r\n  \"skate\",\r\n  \"skier\",\r\n  \"skiff\",\r\n  \"skill\",\r\n  \"skimp\",\r\n  \"skirt\",\r\n  \"skulk\",\r\n  \"skull\",\r\n  \"skunk\",\r\n  \"slack\",\r\n  \"slain\",\r\n  \"slang\",\r\n  \"slant\",\r\n  \"slash\",\r\n  \"slate\",\r\n  \"slave\",\r\n  \"sleek\",\r\n  \"sleep\",\r\n  \"sleet\",\r\n  \"slept\",\r\n  \"slice\",\r\n  \"slick\",\r\n  \"slide\",\r\n  \"slime\",\r\n  \"slimy\",\r\n  \"sling\",\r\n  \"slink\",\r\n  \"sloop\",\r\n  \"slope\",\r\n  \"slosh\",\r\n  \"sloth\",\r\n  \"slump\",\r\n  \"slung\",\r\n  \"slunk\",\r\n  \"slurp\",\r\n  \"slush\",\r\n  \"slyly\",\r\n  \"smack\",\r\n  \"small\",\r\n  \"smart\",\r\n  \"smash\",\r\n  \"smear\",\r\n  \"smell\",\r\n  \"smelt\",\r\n  \"smile\",\r\n  \"smirk\",\r\n  \"smite\",\r\n  \"smith\",\r\n  \"smock\",\r\n  \"smoke\",\r\n  \"smoky\",\r\n  \"smote\",\r\n  \"snack\",\r\n  \"snail\",\r\n  \"snake\",\r\n  \"snaky\",\r\n  \"snare\",\r\n  \"snarl\",\r\n  \"sneak\",\r\n  \"sneer\",\r\n  \"snide\",\r\n  \"sniff\",\r\n  \"snipe\",\r\n  \"snoop\",\r\n  \"snore\",\r\n  \"snort\",\r\n  \"snout\",\r\n  \"snowy\",\r\n  \"snuck\",\r\n  \"snuff\",\r\n  \"soapy\",\r\n  \"sober\",\r\n  \"soggy\",\r\n  \"solar\",\r\n  \"solid\",\r\n  \"solve\",\r\n  \"sonar\",\r\n  \"sonic\",\r\n  \"sooth\",\r\n  \"sooty\",\r\n  \"sorry\",\r\n  \"sound\",\r\n  \"south\",\r\n  \"sower\",\r\n  \"space\",\r\n  \"spade\",\r\n  \"spank\",\r\n  \"spare\",\r\n  \"spark\",\r\n  \"spasm\",\r\n  \"spawn\",\r\n  \"speak\",\r\n  \"spear\",\r\n  \"speck\",\r\n  \"speed\",\r\n  \"spell\",\r\n  \"spelt\",\r\n  \"spend\",\r\n  \"spent\",\r\n  \"sperm\",\r\n  \"spice\",\r\n  \"spicy\",\r\n  \"spied\",\r\n  \"spiel\",\r\n  \"spike\",\r\n  \"spiky\",\r\n  \"spill\",\r\n  \"spilt\",\r\n  \"spine\",\r\n  \"spiny\",\r\n  \"spire\",\r\n  \"spite\",\r\n  \"splat\",\r\n  \"split\",\r\n  \"spoil\",\r\n  \"spoke\",\r\n  \"spoof\",\r\n  \"spook\",\r\n  \"spool\",\r\n  \"spoon\",\r\n  \"spore\",\r\n  \"sport\",\r\n  \"spout\",\r\n  \"spray\",\r\n  \"spree\",\r\n  \"sprig\",\r\n  \"spunk\",\r\n  \"spurn\",\r\n  \"spurt\",\r\n  \"squad\",\r\n  \"squat\",\r\n  \"squib\",\r\n  \"stack\",\r\n  \"staff\",\r\n  \"stage\",\r\n  \"staid\",\r\n  \"stain\",\r\n  \"stair\",\r\n  \"stake\",\r\n  \"stale\",\r\n  \"stalk\",\r\n  \"stall\",\r\n  \"stamp\",\r\n  \"stand\",\r\n  \"stank\",\r\n  \"stare\",\r\n  \"stark\",\r\n  \"start\",\r\n  \"stash\",\r\n  \"state\",\r\n  \"stave\",\r\n  \"stead\",\r\n  \"steak\",\r\n  \"steal\",\r\n  \"steam\",\r\n  \"steed\",\r\n  \"steel\",\r\n  \"steep\",\r\n  \"steer\",\r\n  \"stein\",\r\n  \"stern\",\r\n  \"stick\",\r\n  \"stiff\",\r\n  \"still\",\r\n  \"stilt\",\r\n  \"sting\",\r\n  \"stink\",\r\n  \"stint\",\r\n  \"stock\",\r\n  \"stoic\",\r\n  \"stoke\",\r\n  \"stole\",\r\n  \"stomp\",\r\n  \"stone\",\r\n  \"stony\",\r\n  \"stood\",\r\n  \"stool\",\r\n  \"stoop\",\r\n  \"store\",\r\n  \"stork\",\r\n  \"storm\",\r\n  \"story\",\r\n  \"stout\",\r\n  \"stove\",\r\n  \"strap\",\r\n  \"straw\",\r\n  \"stray\",\r\n  \"strip\",\r\n  \"strut\",\r\n  \"stuck\",\r\n  \"study\",\r\n  \"stuff\",\r\n  \"stump\",\r\n  \"stung\",\r\n  \"stunk\",\r\n  \"stunt\",\r\n  \"style\",\r\n  \"suave\",\r\n  \"sugar\",\r\n  \"suing\",\r\n  \"suite\",\r\n  \"sulky\",\r\n  \"sully\",\r\n  \"sumac\",\r\n  \"sunny\",\r\n  \"super\",\r\n  \"surer\",\r\n  \"surge\",\r\n  \"surly\",\r\n  \"sushi\",\r\n  \"swami\",\r\n  \"swamp\",\r\n  \"swarm\",\r\n  \"swash\",\r\n  \"swath\",\r\n  \"swear\",\r\n  \"sweat\",\r\n  \"sweep\",\r\n  \"sweet\",\r\n  \"swell\",\r\n  \"swept\",\r\n  \"swift\",\r\n  \"swill\",\r\n  \"swine\",\r\n  \"swing\",\r\n  \"swirl\",\r\n  \"swish\",\r\n  \"swoon\",\r\n  \"swoop\",\r\n  \"sword\",\r\n  \"swore\",\r\n  \"sworn\",\r\n  \"swung\",\r\n  \"synod\",\r\n  \"syrup\",\r\n  \"tabby\",\r\n  \"table\",\r\n  \"taboo\",\r\n  \"tacit\",\r\n  \"tacky\",\r\n  \"taffy\",\r\n  \"taint\",\r\n  \"taken\",\r\n  \"taker\",\r\n  \"tally\",\r\n  \"talon\",\r\n  \"tamer\",\r\n  \"tango\",\r\n  \"tangy\",\r\n  \"taper\",\r\n  \"tapir\",\r\n  \"tardy\",\r\n  \"tarot\",\r\n  \"taste\",\r\n  \"tasty\",\r\n  \"tatty\",\r\n  \"taunt\",\r\n  \"tawny\",\r\n  \"teach\",\r\n  \"teary\",\r\n  \"tease\",\r\n  \"teddy\",\r\n  \"teeth\",\r\n  \"tempo\",\r\n  \"tenet\",\r\n  \"tenor\",\r\n  \"tense\",\r\n  \"tenth\",\r\n  \"tepee\",\r\n  \"tepid\",\r\n  \"terra\",\r\n  \"terse\",\r\n  \"testy\",\r\n  \"thank\",\r\n  \"theft\",\r\n  \"their\",\r\n  \"theme\",\r\n  \"there\",\r\n  \"these\",\r\n  \"theta\",\r\n  \"thick\",\r\n  \"thief\",\r\n  \"thigh\",\r\n  \"thing\",\r\n  \"think\",\r\n  \"third\",\r\n  \"thong\",\r\n  \"thorn\",\r\n  \"those\",\r\n  \"three\",\r\n  \"threw\",\r\n  \"throb\",\r\n  \"throw\",\r\n  \"thrum\",\r\n  \"thumb\",\r\n  \"thump\",\r\n  \"thyme\",\r\n  \"tiara\",\r\n  \"tibia\",\r\n  \"tidal\",\r\n  \"tiger\",\r\n  \"tight\",\r\n  \"tilde\",\r\n  \"timer\",\r\n  \"timid\",\r\n  \"tipsy\",\r\n  \"titan\",\r\n  \"tithe\",\r\n  \"title\",\r\n  \"toast\",\r\n  \"today\",\r\n  \"toddy\",\r\n  \"token\",\r\n  \"tonal\",\r\n  \"tonga\",\r\n  \"tonic\",\r\n  \"tooth\",\r\n  \"topaz\",\r\n  \"topic\",\r\n  \"torch\",\r\n  \"torso\",\r\n  \"torus\",\r\n  \"total\",\r\n  \"totem\",\r\n  \"touch\",\r\n  \"tough\",\r\n  \"towel\",\r\n  \"tower\",\r\n  \"toxic\",\r\n  \"toxin\",\r\n  \"trace\",\r\n  \"track\",\r\n  \"tract\",\r\n  \"trade\",\r\n  \"trail\",\r\n  \"train\",\r\n  \"trait\",\r\n  \"tramp\",\r\n  \"trash\",\r\n  \"trawl\",\r\n  \"tread\",\r\n  \"treat\",\r\n  \"trend\",\r\n  \"triad\",\r\n  \"trial\",\r\n  \"tribe\",\r\n  \"trice\",\r\n  \"trick\",\r\n  \"tried\",\r\n  \"tripe\",\r\n  \"trite\",\r\n  \"troll\",\r\n  \"troop\",\r\n  \"trope\",\r\n  \"trout\",\r\n  \"trove\",\r\n  \"truce\",\r\n  \"truck\",\r\n  \"truer\",\r\n  \"truly\",\r\n  \"trump\",\r\n  \"trunk\",\r\n  \"truss\",\r\n  \"trust\",\r\n  \"truth\",\r\n  \"tryst\",\r\n  \"tubal\",\r\n  \"tuber\",\r\n  \"tulip\",\r\n  \"tulle\",\r\n  \"tumor\",\r\n  \"tunic\",\r\n  \"turbo\",\r\n  \"tutor\",\r\n  \"twang\",\r\n  \"tweak\",\r\n  \"tweed\",\r\n  \"tweet\",\r\n  \"twice\",\r\n  \"twine\",\r\n  \"twirl\",\r\n  \"twist\",\r\n  \"twixt\",\r\n  \"tying\",\r\n  \"udder\",\r\n  \"ulcer\",\r\n  \"ultra\",\r\n  \"umbra\",\r\n  \"uncle\",\r\n  \"uncut\",\r\n  \"under\",\r\n  \"undid\",\r\n  \"undue\",\r\n  \"unfed\",\r\n  \"unfit\",\r\n  \"unify\",\r\n  \"union\",\r\n  \"unite\",\r\n  \"unity\",\r\n  \"unlit\",\r\n  \"unmet\",\r\n  \"unset\",\r\n  \"untie\",\r\n  \"until\",\r\n  \"unwed\",\r\n  \"unzip\",\r\n  \"upper\",\r\n  \"upset\",\r\n  \"urban\",\r\n  \"urine\",\r\n  \"usage\",\r\n  \"usher\",\r\n  \"using\",\r\n  \"usual\",\r\n  \"usurp\",\r\n  \"utile\",\r\n  \"utter\",\r\n  \"vague\",\r\n  \"valet\",\r\n  \"valid\",\r\n  \"valor\",\r\n  \"value\",\r\n  \"valve\",\r\n  \"vapid\",\r\n  \"vapor\",\r\n  \"vault\",\r\n  \"vaunt\",\r\n  \"vegan\",\r\n  \"venom\",\r\n  \"venue\",\r\n  \"verge\",\r\n  \"verse\",\r\n  \"verso\",\r\n  \"verve\",\r\n  \"vicar\",\r\n  \"video\",\r\n  \"vigil\",\r\n  \"vigor\",\r\n  \"villa\",\r\n  \"vinyl\",\r\n  \"viola\",\r\n  \"viper\",\r\n  \"viral\",\r\n  \"virus\",\r\n  \"visit\",\r\n  \"visor\",\r\n  \"vista\",\r\n  \"vital\",\r\n  \"vivid\",\r\n  \"vixen\",\r\n  \"vocal\",\r\n  \"vodka\",\r\n  \"vogue\",\r\n  \"voice\",\r\n  \"voila\",\r\n  \"vomit\",\r\n  \"voter\",\r\n  \"vouch\",\r\n  \"vowel\",\r\n  \"vying\",\r\n  \"wacky\",\r\n  \"wafer\",\r\n  \"wager\",\r\n  \"wagon\",\r\n  \"waist\",\r\n  \"waive\",\r\n  \"waltz\",\r\n  \"warty\",\r\n  \"waste\",\r\n  \"watch\",\r\n  \"water\",\r\n  \"waver\",\r\n  \"waxen\",\r\n  \"weary\",\r\n  \"weave\",\r\n  \"wedge\",\r\n  \"weedy\",\r\n  \"weigh\",\r\n  \"weird\",\r\n  \"welch\",\r\n  \"welsh\",\r\n  \"wench\",\r\n  \"whack\",\r\n  \"whale\",\r\n  \"wharf\",\r\n  \"wheat\",\r\n  \"wheel\",\r\n  \"whelp\",\r\n  \"where\",\r\n  \"which\",\r\n  \"whiff\",\r\n  \"while\",\r\n  \"whine\",\r\n  \"whiny\",\r\n  \"whirl\",\r\n  \"whisk\",\r\n  \"white\",\r\n  \"whole\",\r\n  \"whoop\",\r\n  \"whose\",\r\n  \"widen\",\r\n  \"wider\",\r\n  \"widow\",\r\n  \"width\",\r\n  \"wield\",\r\n  \"wight\",\r\n  \"willy\",\r\n  \"wimpy\",\r\n  \"wince\",\r\n  \"winch\",\r\n  \"windy\",\r\n  \"wiser\",\r\n  \"wispy\",\r\n  \"witch\",\r\n  \"witty\",\r\n  \"woken\",\r\n  \"woman\",\r\n  \"women\",\r\n  \"woody\",\r\n  \"wooer\",\r\n  \"wooly\",\r\n  \"woozy\",\r\n  \"wordy\",\r\n  \"world\",\r\n  \"worry\",\r\n  \"worse\",\r\n  \"worst\",\r\n  \"worth\",\r\n  \"would\",\r\n  \"wound\",\r\n  \"woven\",\r\n  \"wrack\",\r\n  \"wrath\",\r\n  \"wreak\",\r\n  \"wreck\",\r\n  \"wrest\",\r\n  \"wring\",\r\n  \"wrist\",\r\n  \"write\",\r\n  \"wrong\",\r\n  \"wrote\",\r\n  \"wrung\",\r\n  \"wryly\",\r\n  \"yacht\",\r\n  \"yearn\",\r\n  \"yeast\",\r\n  \"yield\",\r\n  \"young\",\r\n  \"youth\",\r\n  \"zebra\",\r\n  \"zesty\",\r\n  \"zonal\",\r\n];\r\n\r\nconst findResults = (state) => {\r\n  const { letters, excludedLetters, unknownLetters } = state;\r\n\r\n  let results = dict;\r\n\r\n  if (excludedLetters.length) {\r\n    results = results.filter((word) => {\r\n      var wordArr = word.split(\"\");\r\n      for (let i = 0; i < excludedLetters.length; i++) {\r\n        if (wordArr.includes(excludedLetters[i])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  //   if (letters.some((x) => x !== \"\")) {\r\n  //     results = results.filter((word) => {\r\n  //       for (let i = 0; i <= 4; i++) {\r\n  //         if (letters[i] !== \"\") {\r\n  //           if (letters[i] !== word[i]) {\r\n  //             return false;\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //       return true;\r\n  //     });\r\n  //   }\r\n\r\n  //   for (const [key, value] of Object.entries(unknownLetters)) {\r\n  //     if (value.length > 0) {\r\n  //       results = results.filter((word) => {\r\n  //         if (!word.split(\"\").includes(key)) {\r\n  //           return false;\r\n  //         }\r\n  //         for (let i = 0; i <= value.length; i++) {\r\n  //           if (word[value[i]] === key) {\r\n  //             return false;\r\n  //           }\r\n  //         }\r\n  //         return true;\r\n  //       });\r\n  //     }\r\n  //   }\r\n  //   if (results.length === dict.length) {\r\n  //     return [];\r\n  //   }\r\n\r\n  return results;\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      letters: [\"\", \"\", \"\", \"\", \"\"],\r\n      excludedLetters: [],\r\n      results: \"\",\r\n      unknownLetters: alphabet\r\n        .split(\"\")\r\n        .reduce((a, b) => ({ ...a, [b]: [] }), {}),\r\n      stateString: \"\",\r\n    };\r\n  }\r\n\r\n  addGuess = () => {\r\n    var results = findResults(this.state);\r\n    var stateString = JSON.stringify(this.state);\r\n    this.setState({ ...this.state, results, stateString });\r\n    console.log(this.state);\r\n  };\r\n\r\n  onInput = (index, event) => {\r\n    if (event.target.value) {\r\n      if (event.target.nextSibling) {\r\n        event.target.nextSibling.focus();\r\n      }\r\n    } else {\r\n      if (event.target.previousSibling) {\r\n        event.target.previousSibling.focus();\r\n      }\r\n    }\r\n\r\n    var letters = this.state.letters;\r\n    letters[index] = event.target.value;\r\n    this.setState({ ...this.state, letters });\r\n  };\r\n\r\n  toggleLetter = (x) => {\r\n    var excludedLetters = this.state.excludedLetters;\r\n    if (excludedLetters.includes(x)) {\r\n      excludedLetters.splice(excludedLetters.indexOf(x), 1);\r\n    } else {\r\n      excludedLetters.push(x);\r\n    }\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      excludedLetters,\r\n    });\r\n  };\r\n\r\n  setUnknownLetters = (letter, positions) => {\r\n    let { unknownLetters } = this.state;\r\n    unknownLetters[letter] = positions;\r\n    this.setState({\r\n      ...this.state,\r\n      unknownLetters,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const letterButtons = alphabet\r\n      .split(\"\")\r\n      .map((x) => (\r\n        <LetterButton\r\n          letter={x}\r\n          active={false}\r\n          toggleLetter={this.toggleLetter}\r\n          key={`LetterButton-${x}`}\r\n        ></LetterButton>\r\n      ));\r\n\r\n    const unknownLetters = alphabet\r\n      .split(\"\")\r\n      .map((x) => (\r\n        <UnknownLetter\r\n          letter={x}\r\n          active={false}\r\n          toggleLetter={this.toggleLetter}\r\n          key={`LetterButton-${x}`}\r\n          setUnknownLetters={this.setUnknownLetters}\r\n        ></UnknownLetter>\r\n      ));\r\n\r\n    return (\r\n      <div style={{ marginBottom: \"50px\" }}>\r\n        <p className=\"title\">Wordle Helper</p>\r\n        <a href=\"https://github.com/victoriousj/\">\r\n          <code style={{ textTransform: \"lowercase\" }}>\r\n            by victor d johnson\r\n          </code>\r\n        </a>\r\n        {this.state.results !== \"\" && (\r\n          <div\r\n            style={{\r\n              border: \"1px solid white\",\r\n              padding: \"10px 20px\",\r\n              marginTop: \"20px\",\r\n              borderRadius: \"5px\",\r\n            }}\r\n          >\r\n            <div style={{ fontSize: \"2em\" }}>RESULTS</div>\r\n            <div\r\n              style={{ marginTop: \"20px\" }}\r\n              className={`${\r\n                this.state.results.length === 1 ? \"answer\" : \"\"\r\n              } results`}\r\n            >\r\n              {this.state.results.length > 0\r\n                ? this.state.results.join(\", \")\r\n                : \"NO RESULTS\"}\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          <button className=\"submit\" onClick={this.addGuess}>\r\n            SUBMIT\r\n          </button>\r\n        </div>\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          <div style={{ marginBottom: \"10px\" }}>\r\n            letters you know their placement\r\n          </div>\r\n          <input\r\n            onInput={(e) => this.onInput(0, e)}\r\n            type=\"text\"\r\n            maxLength={1}\r\n          />\r\n          <input\r\n            onInput={(e) => this.onInput(1, e)}\r\n            type=\"text\"\r\n            maxLength={1}\r\n          />\r\n          <input\r\n            onInput={(e) => this.onInput(2, e)}\r\n            type=\"text\"\r\n            maxLength={1}\r\n          />\r\n          <input\r\n            onInput={(e) => this.onInput(3, e)}\r\n            type=\"text\"\r\n            maxLength={1}\r\n          />\r\n          <input\r\n            onInput={(e) => this.onInput(4, e)}\r\n            type=\"text\"\r\n            maxLength={1}\r\n          />\r\n        </div>\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          <div style={{ marginBottom: \"10px\" }}>\r\n            letters that are not included\r\n          </div>\r\n\r\n          {letterButtons}\r\n        </div>\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          <div style={{ marginBottom: \"10px\" }}>\r\n            letters with unknown positions - check where letters are NOT located\r\n          </div>\r\n          {unknownLetters}\r\n        </div>\r\n        {<div>{this.state.stateString}</div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}